
DA4_T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077b  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a9  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e6  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int count =0; //bool

int main(void)
{
	int i;
	TCCR1B=0b00001010;
  90:	8a e0       	ldi	r24, 0x0A	; 10
  92:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TCCR1A=0xA3;
  96:	83 ea       	ldi	r24, 0xA3	; 163
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		PORTD = 1 <<2;
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	8b b9       	out	0x0b, r24	; 11
		EIMSK = (1 << INT0);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	8d bb       	out	0x1d, r24	; 29
		
		ADMUX = 0x60;
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ADCSRA = 0xE6;
  aa:	86 ee       	ldi	r24, 0xE6	; 230
  ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//PORTD |= ( 1 << PORTD1) | ( 1 << PORTD0);
	//PORTB |= ( 1 << PORTB1); //1,2EN
	//OCR0A = 15;

	//PORTD = 1;
	sei();
  b0:	78 94       	sei
	DDRB = 0xFF; //set as output
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
			
				PORTB = 0x03;
				_delay_ms(4000);
				*/
	 //check if ADIF is 1, if not stay here
while(!(ADCSRA & (1<<ADIF)));
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0

ADCSRA |=0b00010000;	//set ADIF 1

//read conversion from ADCH register
OCR1A = ADCH;
  ba:	c9 e7       	ldi	r28, 0x79	; 121
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	a8 e8       	ldi	r26, 0x88	; 136
  c0:	b0 e0       	ldi	r27, 0x00	; 0
			
				PORTB = 0x03;
				_delay_ms(4000);
				*/
	 //check if ADIF is 1, if not stay here
while(!(ADCSRA & (1<<ADIF)));
  c2:	80 81       	ld	r24, Z
  c4:	84 ff       	sbrs	r24, 4
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <main+0x32>

ADCSRA |=0b00010000;	//set ADIF 1
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24

//read conversion from ADCH register
OCR1A = ADCH;
  ce:	88 81       	ld	r24, Y
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	11 96       	adiw	r26, 0x01	; 1
  d4:	9c 93       	st	X, r25
  d6:	8e 93       	st	-X, r24
				_delay_ms(100);
				OCR0A = 180;
				_delay_ms(100);
				OCR0A = 255;
				_delay_ms(100);*/
	}
  d8:	f4 cf       	rjmp	.-24     	; 0xc2 <main+0x32>

000000da <__vector_1>:
}
ISR(INT0_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	if(count == 0)
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f2:	89 2b       	or	r24, r25
  f4:	61 f4       	brne	.+24     	; 0x10e <__vector_1+0x34>
	{
		PORTB |= 1 << PORTB1; 
  f6:	29 9a       	sbi	0x05, 1	; 5
		PORTB &= ~(1<<PORTB0);
  f8:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	89 e6       	ldi	r24, 0x69	; 105
  fe:	98 e1       	ldi	r25, 0x18	; 24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <__vector_1+0x26>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__vector_1+0x30>
 10a:	00 00       	nop
 10c:	0c c0       	rjmp	.+24     	; 0x126 <__vector_1+0x4c>
		
	}
	else
	{
		
		PORTB &= ~((1<<PORTB0)| (1<<PORTB1));
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 b9       	out	0x05, r24	; 5
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	89 e6       	ldi	r24, 0x69	; 105
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <__vector_1+0x40>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__vector_1+0x4a>
 124:	00 00       	nop
		_delay_ms(1000);
	}
	count ^= 1; 
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	82 27       	eor	r24, r18
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
//count ^= 1;
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
